# Before using this config file please read documentation about our CI
# https://github.com/shopsys/shopsys/

# Environment variables needs to be set in project settings in circle ci

#   - $DOCKER_USERNAME           : your login to docker hub
#   - $DOCKER_PASSWORD           : your password to docker hub
#   - $DOCKER_IMAGE              : name under which you want your php-fpm image to be pushed to docker hub
#   - $WWW_DATA_UID              : id of user running the kubectl commands on cluster server
#   - $WWW_DATA_GID              : id of group running the kubectl commands on cluster server
#   - $KUBERNETES_CONFIG_FILE    : content of ~/.kube/config file on cluster
#   - $DEVELOPMENT_SERVER_DOMAIN : domain name of your server where you want to deploy your application
#   - $CLUSTER_SSH_LOGIN         : ssh login to your cluster server
version: 2
jobs:
  deploy_to_cluster:
    docker:
    - image: petrpliska/shopsys-buildpack:0.1.1
      auth:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
    working_directory: ~/source
    steps:
    - setup_remote_docker
    - checkout

    - run:
        name: Login to Docker hub
        command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
    - run:
        name: Build docker image
        command: |
          # Calculate Docker image tag from Dockerfile checksum. Docker Image tag is used later in Kubernetes deployment.
          # On shopsys development server we can assume, that Docker image used by Kubernetes deployment will be always present, because it was builded on same server.
          # In common we should push this image into Docker registry and use image from registry later.
          DOCKER_IMAGE="${DOCKER_IMAGE:=shopsys/shopsys}"
          DOCKER_IMAGE_TAG="$(cksum Dockerfile | cut -d ' ' -f1)"
          WWW_DATA_UID="${WWW_DATA_UID:=$(id -u)}"
          WWW_DATA_GID="${WWW_DATA_GID:=$(id -g)}"
          docker image pull $DOCKER_USERNAME/$DOCKER_IMAGE:$DOCKER_IMAGE_TAG || (docker image build \
            --build-arg www_data_uid=$WWW_DATA_UID \
            --build-arg www_data_gid=$WWW_DATA_GID \
            --tag $DOCKER_USERNAME/$DOCKER_IMAGE:$DOCKER_IMAGE_TAG \
            --tag $DOCKER_USERNAME/$DOCKER_IMAGE:latest . && \
          # Push image into docker registry
          docker image push $DOCKER_USERNAME/$DOCKER_IMAGE:$DOCKER_IMAGE_TAG &&
          docker image push $DOCKER_USERNAME/$DOCKER_IMAGE:latest)
        working_directory: project-base/docker/php-fpm

    - run:
        name: Setup Kubernetes cluster connection
        command: |
          mkdir -p ~/.kube
          echo -e $KUBERNETES_CONFIG_FILE > ~/.kube/config
    - run:
        name: Set hostnames into Kubernetes manifests
        command: |
          FIRST_DOMAIN_HOSTNAME=$CIRCLE_BRANCH-circle.$DEVELOPMENT_SERVER_DOMAIN
          SECOND_DOMAIN_HOSTNAME=2.$CIRCLE_BRANCH-circle.$DEVELOPMENT_SERVER_DOMAIN

          yq write --inplace ingress.yml spec.rules[0].host $FIRST_DOMAIN_HOSTNAME
          yq write --inplace ingress.yml spec.rules[1].host $SECOND_DOMAIN_HOSTNAME

          yq write --inplace deployments/webserver.yml spec.template.spec.hostAliases[0].hostnames[2] $FIRST_DOMAIN_HOSTNAME
          yq write --inplace deployments/webserver.yml spec.template.spec.hostAliases[0].hostnames[3] $SECOND_DOMAIN_HOSTNAME
        working_directory: project-base/k8s

    - run:
        name: Add persistent volumes pointing to cluster server into webserver and postgres manifest
        command: |
          yq write --inplace deployments/webserver.yml spec.template.spec.volumes[0].hostPath.path /workspace/shopsys/$CIRCLE_BRANCH/source
          yq write --inplace deployments/postgres.yml spec.template.spec.volumes[0].hostPath.path /workspace/shopsys/$CIRCLE_BRANCH/db
          yq write --inplace deployments/elasticsearch.yml spec.template.spec.volumes[0].hostPath.path /workspace/shopsys/$CIRCLE_BRANCH/elastic-data
        working_directory: project-base/k8s

    - run:
        name: Set commit hash for webserver and postgres to redeploy with volumes set
        command: |
          yq write --inplace deployments/postgres.yml spec.template.metadata.labels.commit $CIRCLE_SHA1
          yq write --inplace deployments/postgres.yml spec.selector.matchLabels.commit $CIRCLE_SHA1
          yq write --inplace deployments/webserver.yml spec.template.metadata.labels.commit $CIRCLE_SHA1
          yq write --inplace deployments/webserver.yml spec.selector.matchLabels.commit $CIRCLE_SHA1
        working_directory: project-base/k8s

    - run:
        name: Replace docker image in deployment definition
        command: |
          DOCKER_IMAGE_TAG="$(cksum ../docker/php-fpm/Dockerfile | cut -d ' ' -f1)"
          yq write --inplace deployments/webserver.yml spec.template.spec.containers[0].image $DOCKER_USERNAME/$DOCKER_IMAGE:$DOCKER_IMAGE_TAG
        working_directory: project-base/k8s

    - run:
        name: Create configmap manifests
        command: |
          kubectl create configmap nginx-configuration --from-file ../../docker/nginx/nginx.conf --dry-run --output=yaml > nginx-configuration.yml
          kubectl create configmap php-configuration --from-file ../docker/php-fpm/php-ini-overrides.ini --dry-run --output=yaml > php-configuration.yml
        working_directory: project-base/k8s

    - run:
        name: Setup domain a parameters files
        command: |
          FIRST_DOMAIN_HOSTNAME=$CIRCLE_BRANCH-circle.$DEVELOPMENT_SERVER_DOMAIN
          SECOND_DOMAIN_HOSTNAME=2.$CIRCLE_BRANCH-circle.$DEVELOPMENT_SERVER_DOMAIN
          # Copy files from teplates
          cp project-base/app/config/domains_urls.yml.dist project-base/app/config/domains_urls.yml
          cp project-base/app/config/parameters_test.yml.dist project-base/app/config/parameters_test.yml
          cp project-base/app/config/parameters.yml.dist project-base/app/config/parameters.yml
          # Add domains into domain file
          yq write --inplace project-base/app/config/domains_urls.yml domains_urls[0].url http://$FIRST_DOMAIN_HOSTNAME
          yq write --inplace project-base/app/config/domains_urls.yml domains_urls[1].url http://$SECOND_DOMAIN_HOSTNAME

    - run:
        name: Set SSH credentials
        command: |
          echo -e $SERVER_SSL_CERT > ~/cluster_cert
          chmod 0400 ~/cluster_cert

    - run:
        name: Upload repository into cluster, create volumes and set correct permissions
        command: |
          cd .. && tar -zcvf source.tar.gz source
          ssh -o "StrictHostKeyChecking no" -i ~/cluster_cert $CLUSTER_SSH_LOGIN "mkdir -p /workspace/shopsys/${CIRCLE_BRANCH} && exit"
          ssh -i ~/cluster_cert $CLUSTER_SSH_LOGIN "sudo chown -R www-data:www-data /workspace/shopsys/${CIRCLE_BRANCH}"
          ssh -i ~/cluster_cert $CLUSTER_SSH_LOGIN "rm -rf /workspace/shopsys/${CIRCLE_BRANCH}/* && exit"
          scp -i ~/cluster_cert source.tar.gz $CLUSTER_SSH_LOGIN:/workspace/shopsys/${CIRCLE_BRANCH}
          ssh -i ~/cluster_cert $CLUSTER_SSH_LOGIN "tar -zxvf /workspace/shopsys/${CIRCLE_BRANCH}/source.tar.gz -C /workspace/shopsys/${CIRCLE_BRANCH}/ && exit"
          ssh -i ~/cluster_cert $CLUSTER_SSH_LOGIN "rm /workspace/shopsys/${CIRCLE_BRANCH}/source.tar.gz && exit"
          ssh -i ~/cluster_cert $CLUSTER_SSH_LOGIN "mkdir -p /workspace/shopsys/${CIRCLE_BRANCH}/db && exit"
          ssh -i ~/cluster_cert $CLUSTER_SSH_LOGIN "mkdir -p /workspace/shopsys/${CIRCLE_BRANCH}/elastic-data && exit"

    - run:
        name: Deploy application to Kubernetes cluster
        command: |
          kubectl delete namespace $CIRCLE_BRANCH || true
          kubectl create namespace $CIRCLE_BRANCH || true
          kubectl config set-context $(kubectl config current-context) --namespace=$CIRCLE_BRANCH
          kubectl apply --recursive -f .
        working_directory: project-base/k8s

    - run:
        name: Wait for rollouts
        command: |
          kubectl rollout status deployment/adminer --watch
          kubectl rollout status deployment/elasticsearch --watch
          kubectl rollout status deployment/postgres --watch
          kubectl rollout status deployment/redis --watch
          kubectl rollout status deployment/redis-admin --watch
          kubectl rollout status deployment/selenium-server --watch
          kubectl rollout status deployment/smtp-server --watch
          kubectl rollout status deployment/webserver --watch
    # Storing k8s config and application config as artifacts due to changes done to these files during build process
    - store_artifacts:
        path: project-base/k8s
    - store_artifacts:
        path: project-base/app/config

    - run:
        name: Install composer dependencies
        command: |
          PHP_FPM_POD=$(kubectl get pods -l app=webserver,commit=$CIRCLE_SHA1 -o=jsonpath='{.items[0].metadata.name}')
          kubectl exec $PHP_FPM_POD -c php -- composer config -g github-oauth.github.com $COMPOSER_GITHUB_OATUH_TOKEN
          kubectl exec $PHP_FPM_POD -c php -- composer global require hirak/prestissimo
          kubectl exec $PHP_FPM_POD -c php -- composer install --optimize-autoloader --no-interaction --no-progress

    - run:
        name: Create databases, build application and run tests
        command: |
          PHP_FPM_POD=$(kubectl get pods -l app=webserver,commit=$CIRCLE_SHA1 -o=jsonpath='{.items[0].metadata.name}')
          kubectl exec $PHP_FPM_POD -c php ./phing db-create test-db-create build-demo-ci

workflows:
  version: 2
  deployment:
    jobs:
    - deploy_to_cluster:
        # Filter all tags from building
        filters:
          tags:
            ignore: /.*/
